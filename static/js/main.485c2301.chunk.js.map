{"version":3,"sources":["modules/colors.js","modules/helpers.js","components/ColorBox.jsx","modules/knownColors.js","App.js","modules/getColorFormat.js","serviceWorker.js","index.js"],"names":["hexToRGB","h","isPct","test","r","g","b","length","toFixed","hexAToRGBA","a","RGBAToHSLA","rgba","sep","indexOf","R","substr","split","splice","p","Math","round","cmin","min","cmax","max","delta","l","abs","hexToHSL","H","hexAToHSLA","HSLToHex","hsl","s","PI","c","x","m","toString","copyToClipboard","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","console","log","getColorCodes","colorFormat","input","colorHex","colorHexA","colorRgb","colorRgbA","colorHsl","colorHslA","rgb","RGBToHex","RGBToHSL","RGBAToHexA","HSLToRGB","hsla","HSLAToHexA","pctFound","HSLAToRGBA","slice","replace","normalizedInput","parts","substring","name","fakeDiv","color","pv","window","getComputedStyle","getPropertyValue","nameToHex","nameToRGB","nameToHSL","ColorBox","desc","toast","configure","autoClose","onClick","e","className","background","knownColors","App","useState","setInput","suggestions","setSuggestions","activeSuggestion","setActiveSuggestion","useEffect","addEventListener","handleDropDown","key","updateInputState","removeEventListener","match","includes","getColorFormat","val","filter","startsWith","id","onSubmit","preventDefault","type","onChange","target","onFocus","placeholder","map","sug","i","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,aACA,WACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,e,MC7BaC,MA7Gf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACN1C,EADM,KACC2C,EADD,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,OAGmCH,oBAAU,GAH7C,mBAGNI,EAHM,KAGYC,EAHZ,KAIbC,qBAAU,WAERvB,OAAOwB,iBAAiB,SACxB,SAASC,EAAeb,GAClBO,EAAYhG,OAAS,IACT,cAAVyF,EAAEc,IACJJ,EAAoBD,EAAmB,GACpB,YAAVT,EAAEc,IACXJ,EAAoBD,EAAmB,GAE7B,UAAVT,EAAEc,KACFL,GAAoB,GACpBA,EAAmBF,EAAYhG,SAE/BwG,EAAiBR,EAAYE,IAC7BC,GAAqB,KAGzB,OAAO,WACLtB,OAAO4B,oBAAoB,QAASH,SAGvC,CAACJ,EAAkBF,IAEtB,IAAM7C,ECpCD,SAAwBjB,GAC7B,GAAIA,EAAIwE,MAAM,QACZ,MAAO,OACF,GAAIxE,EAAIwE,MAAM,OACnB,MAAO,MACF,GAAIxE,EAAIwE,MAAM,KAAM,CACzB,GAAmB,IAAfxE,EAAIlC,QAA+B,IAAfkC,EAAIlC,OAE1B,MAAO,MACF,GAAmB,IAAfkC,EAAIlC,OAEb,MAAO,WAEJ,IAAIkC,EAAIwE,MAAM,QACnB,MAAO,OACF,GAAIxE,EAAIwE,MAAM,OACnB,MAAO,MACF,GAAId,EAAYe,SAASzE,GAC9B,MAAO,OAGT,OAAO,EDea0E,CAAexD,GA5BtB,EAoCTF,EAAcC,EAAaC,GApClB,mBA8BXC,EA9BW,KA+BXC,EA/BW,KAgCXC,EAhCW,KAiCXC,EAjCW,KAkCXC,EAlCW,KAmCXC,EAnCW,KAsCb,SAAS8C,EAAiBK,GACxBd,EAASc,GACTZ,EACEL,EAAYkB,QACV,SAAAnC,GAAK,MAAY,KAARkC,GAAclC,EAAMoC,WAAWF,IAAQlC,IAAUkC,MAG9DV,GAAqB,GAoBvB,OACE,oCACE,kBAAC,IAAD,MACA,yBAAKa,GAAG,WACN,yBAAKA,GAAG,eACN,0BACEC,SAAU,SAAAxB,GACRA,EAAEyB,mBAGJ,2BACEC,KAAK,OACL1C,KAAK,QACLnC,MAAOc,EACPgE,SAAU,SAAA3B,GAAC,OAAIe,EAAiBf,EAAE4B,OAAO/E,QACzCgF,QAAS,SAAA7B,GAAC,OAAIA,EAAE4B,OAAOxE,UACvB0E,YAAY,6BAEd,4BACGvB,EAAYwB,KAAI,SAACC,EAAKC,GACrB,OACE,wBACEnB,IAAKmB,EACLhC,UAAWQ,IAAqBwB,EAAI,SAAW,GAC/ClC,QAAS,kBAAMgB,EAAiBiB,KAE/BA,SAOb,kBAACtC,EAAD,CAAUR,MAAOtB,EAAU+B,KAAK,QAChC,kBAACD,EAAD,CAAUR,MAAOrB,EAAW8B,KAAK,SACjC,kBAACD,EAAD,CAAUR,MAAOpB,EAAU6B,KAAK,QAChC,kBAACD,EAAD,CAAUR,MAAOnB,EAAW4B,KAAK,SACjC,kBAACD,EAAD,CAAUR,MAAOlB,EAAU2B,KAAK,QAChC,kBAACD,EAAD,CAAUR,MAAOjB,EAAW0B,KAAK,YErGrBuC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAO,kBAAC,EAAD,MAAS3F,SAAS4F,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.485c2301.chunk.js","sourcesContent":["//https://codepen.io/jkantner/pen/VVEMRK\nexport function RGBToHex(rgb) {\n  let ex = /^rgb\\((((((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]),\\s?)){2}|((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5])\\s)){2})((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]))|((((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%,\\s?){2}|((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%\\s){2})(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%))\\)$/i;\n  if (ex.test(rgb)) {\n    // choose correct separator\n    let sep = rgb.indexOf(\",\") > -1 ? \",\" : \" \";\n    // turn \"rgb(r,g,b)\" into [r,g,b]\n    rgb = rgb\n      .substr(4)\n      .split(\")\")[0]\n      .split(sep);\n\n    // convert %s to 0–255\n    for (let R in rgb) {\n      let r = rgb[R];\n      if (r.indexOf(\"%\") > -1)\n        rgb[R] = Math.round((r.substr(0, r.length - 1) / 100) * 255);\n      /* Example:\n        75% -> 191\n        75/100 = 0.75, * 255 = 191.25 -> 191\n        */\n    }\n\n    let r = (+rgb[0]).toString(16),\n      g = (+rgb[1]).toString(16),\n      b = (+rgb[2]).toString(16);\n\n    if (r.length === 1) r = \"0\" + r;\n    if (g.length === 1) g = \"0\" + g;\n    if (b.length === 1) b = \"0\" + b;\n\n    return \"#\" + r + g + b;\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function RGBAToHexA(rgba) {\n  let ex = /^rgba\\((((((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]),\\s?)){3})|(((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%,\\s?){3}))|(((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5])\\s){3})|(((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%\\s){3}))\\/\\s)((0?\\.\\d+)|[01]|(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%)\\)$/i;\n  if (ex.test(rgba)) {\n    let sep = rgba.indexOf(\",\") > -1 ? \",\" : \" \";\n    rgba = rgba\n      .substr(5)\n      .split(\")\")[0]\n      .split(sep);\n\n    // strip the slash if using space-separated syntax\n    if (rgba.indexOf(\"/\") > -1) rgba.splice(3, 1);\n\n    for (let R in rgba) {\n      let r = rgba[R];\n      if (r.indexOf(\"%\") > -1) {\n        let p = r.substr(0, r.length - 1) / 100;\n\n        if (R < 3) {\n          rgba[R] = Math.round(p * 255);\n        } else {\n          rgba[R] = p;\n        }\n      }\n    }\n\n    let r = (+rgba[0]).toString(16),\n      g = (+rgba[1]).toString(16),\n      b = (+rgba[2]).toString(16),\n      a = Math.round(+rgba[3] * 255).toString(16);\n\n    if (r.length === 1) r = \"0\" + r;\n    if (g.length === 1) g = \"0\" + g;\n    if (b.length === 1) b = \"0\" + b;\n    if (a.length === 1) a = \"0\" + a;\n\n    return \"#\" + r + g + b + a;\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function hexToRGB(h, isPct) {\n  let ex = /^#([\\da-f]{3}){1,2}$/i;\n  if (ex.test(h)) {\n    let r = 0,\n      g = 0,\n      b = 0;\n    isPct = isPct === true;\n\n    // 3 digits\n    if (h.length === 4) {\n      r = \"0x\" + h[1] + h[1];\n      g = \"0x\" + h[2] + h[2];\n      b = \"0x\" + h[3] + h[3];\n\n      // 6 digits\n    } else if (h.length === 7) {\n      r = \"0x\" + h[1] + h[2];\n      g = \"0x\" + h[3] + h[4];\n      b = \"0x\" + h[5] + h[6];\n    }\n    if (isPct) {\n      r = +((r / 255) * 100).toFixed(1);\n      g = +((g / 255) * 100).toFixed(1);\n      b = +((b / 255) * 100).toFixed(1);\n    }\n    return (\n      \"rgb(\" +\n      (isPct ? r + \"%,\" + g + \"%,\" + b + \"%\" : +r + \",\" + +g + \",\" + +b) +\n      \")\"\n    );\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function hexAToRGBA(h, isPct) {\n  let ex = /^#([\\da-f]{4}){1,2}$/i;\n  if (ex.test(h)) {\n    let r = 0,\n      g = 0,\n      b = 0,\n      a = 1;\n    isPct = isPct === true;\n\n    if (h.length === 5) {\n      r = \"0x\" + h[1] + h[1];\n      g = \"0x\" + h[2] + h[2];\n      b = \"0x\" + h[3] + h[3];\n      a = \"0x\" + h[4] + h[4];\n    } else if (h.length === 9) {\n      r = \"0x\" + h[1] + h[2];\n      g = \"0x\" + h[3] + h[4];\n      b = \"0x\" + h[5] + h[6];\n      a = \"0x\" + h[7] + h[8];\n    }\n    a = +(a / 255).toFixed(3);\n    if (isPct) {\n      r = +((r / 255) * 100).toFixed(1);\n      g = +((g / 255) * 100).toFixed(1);\n      b = +((b / 255) * 100).toFixed(1);\n      a = +(a * 100).toFixed(1);\n    }\n\n    return (\n      \"rgba(\" +\n      (isPct\n        ? r + \"%,\" + g + \"%,\" + b + \"%,\" + a\n        : +r + \",\" + +g + \",\" + +b + \",\" + a) +\n      \")\"\n    );\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function RGBToHSL(rgb) {\n  let ex = /^rgb\\((((((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]),\\s?)){2}|((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5])\\s)){2})((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]))|((((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%,\\s?){2}|((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%\\s){2})(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%))\\)$/i;\n  if (ex.test(rgb)) {\n    let sep = rgb.indexOf(\",\") > -1 ? \",\" : \" \";\n    rgb = rgb\n      .substr(4)\n      .split(\")\")[0]\n      .split(sep);\n\n    // convert %s to 0–255\n    for (let R in rgb) {\n      let r = rgb[R];\n      if (r.indexOf(\"%\") > -1)\n        rgb[R] = Math.round((r.substr(0, r.length - 1) / 100) * 255);\n    }\n\n    // make r, g, and b fractions of 1\n    let r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255,\n      // find greatest and smallest channel values\n      cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n\n    // calculate hue\n    // no difference\n    if (delta === 0) h = 0;\n    // red is max\n    else if (cmax === r) h = ((g - b) / delta) % 6;\n    // green is max\n    else if (cmax === g) h = (b - r) / delta + 2;\n    // blue is max\n    else h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    // make negative hues positive behind 360°\n    if (h < 0) h += 360;\n\n    // calculate lightness\n    l = (cmax + cmin) / 2;\n\n    // calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n    // multiply l and s by 100\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return \"hsl(\" + h + \",\" + s + \"%,\" + l + \"%)\";\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function RGBAToHSLA(rgba) {\n  let ex = /^rgba\\((((((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]),\\s?)){3})|(((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%,\\s?){3}))|(((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5])\\s){3})|(((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%\\s){3}))\\/\\s)((0?\\.\\d+)|[01]|(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%)\\)$/i;\n  if (ex.test(rgba)) {\n    let sep = rgba.indexOf(\",\") > -1 ? \",\" : \" \";\n    rgba = rgba\n      .substr(5)\n      .split(\")\")[0]\n      .split(sep);\n\n    // strip the slash if using space-separated syntax\n    if (rgba.indexOf(\"/\") > -1) rgba.splice(3, 1);\n\n    for (let R in rgba) {\n      let r = rgba[R];\n      if (r.indexOf(\"%\") > -1) {\n        let p = r.substr(0, r.length - 1) / 100;\n\n        if (R < 3) {\n          rgba[R] = Math.round(p * 255);\n        }\n      }\n    }\n\n    // make r, g, and b fractions of 1\n    let r = rgba[0] / 255,\n      g = rgba[1] / 255,\n      b = rgba[2] / 255,\n      a = rgba[3],\n      // find greatest and smallest channel values\n      cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n\n    // calculate hue\n    // no difference\n    if (delta === 0) h = 0;\n    // red is max\n    else if (cmax === r) h = ((g - b) / delta) % 6;\n    // green is max\n    else if (cmax === g) h = (b - r) / delta + 2;\n    // blue is max\n    else h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    // make negative hues positive behind 360°\n    if (h < 0) h += 360;\n\n    // calculate lightness\n    l = (cmax + cmin) / 2;\n\n    // calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n    // multiply l and s by 100\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return \"hsla(\" + h + \",\" + s + \"%,\" + l + \"%,\" + a + \")\";\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function HSLToRGB(hsl, isPct) {\n  let ex = /^hsl\\(((((([12]?[1-9]?\\d)|[12]0\\d|(3[0-5]\\d))(\\.\\d+)?)|(\\.\\d+))(deg)?|(0|0?\\.\\d+)turn|(([0-6](\\.\\d+)?)|(\\.\\d+))rad)((,\\s?(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2}|(\\s(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2})\\)$/i;\n  if (ex.test(hsl)) {\n    let sep = hsl.indexOf(\",\") > -1 ? \",\" : \" \";\n    hsl = hsl\n      .substr(4)\n      .split(\")\")[0]\n      .split(sep);\n    isPct = isPct === true;\n\n    let h = hsl[0],\n      s = hsl[1].substr(0, hsl[1].length - 1) / 100,\n      l = hsl[2].substr(0, hsl[2].length - 1) / 100;\n\n    // strip label and convert to degrees (if necessary)\n    if (h.indexOf(\"deg\") > -1) h = h.substr(0, h.length - 3);\n    else if (h.indexOf(\"rad\") > -1)\n      h = Math.round((h.substr(0, h.length - 3) / (2 * Math.PI)) * 360);\n    else if (h.indexOf(\"turn\") > -1)\n      h = Math.round(h.substr(0, h.length - 4) * 360);\n    // keep hue fraction of 360 if ending up over\n    if (h >= 360) h %= 360;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s,\n      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\n      m = l - c / 2,\n      r = 0,\n      g = 0,\n      b = 0;\n\n    if (0 <= h && h < 60) {\n      r = c;\n      g = x;\n      b = 0;\n    } else if (60 <= h && h < 120) {\n      r = x;\n      g = c;\n      b = 0;\n    } else if (120 <= h && h < 180) {\n      r = 0;\n      g = c;\n      b = x;\n    } else if (180 <= h && h < 240) {\n      r = 0;\n      g = x;\n      b = c;\n    } else if (240 <= h && h < 300) {\n      r = x;\n      g = 0;\n      b = c;\n    } else if (300 <= h && h < 360) {\n      r = c;\n      g = 0;\n      b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    if (isPct) {\n      r = +((r / 255) * 100).toFixed(1);\n      g = +((g / 255) * 100).toFixed(1);\n      b = +((b / 255) * 100).toFixed(1);\n    }\n\n    return (\n      \"rgb(\" +\n      (isPct ? r + \"%,\" + g + \"%,\" + b + \"%\" : +r + \",\" + +g + \",\" + +b) +\n      \")\"\n    );\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function HSLAToRGBA(hsla, isPct) {\n  let ex = /^hsla\\(((((([12]?[1-9]?\\d)|[12]0\\d|(3[0-5]\\d))(\\.\\d+)?)|(\\.\\d+))(deg)?|(0|0?\\.\\d+)turn|(([0-6](\\.\\d+)?)|(\\.\\d+))rad)(((,\\s?(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2},\\s?)|((\\s(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2}\\s\\/\\s))((0?\\.\\d+)|[01]|(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%)\\)$/i;\n  if (ex.test(hsla)) {\n    let sep = hsla.indexOf(\",\") > -1 ? \",\" : \" \";\n    hsla = hsla\n      .substr(5)\n      .split(\")\")[0]\n      .split(sep);\n\n    // strip the slash if using space-separated syntax\n    if (hsla.indexOf(\"/\") > -1) hsla.splice(3, 1);\n\n    isPct = isPct === true;\n\n    // must be fractions of 1\n    let h = hsla[0],\n      s = hsla[1].substr(0, hsla[1].length - 1) / 100,\n      l = hsla[2].substr(0, hsla[2].length - 1) / 100,\n      a = hsla[3];\n\n    // strip label and convert to degrees (if necessary)\n    if (h.indexOf(\"deg\") > -1) h = h.substr(0, h.length - 3);\n    else if (h.indexOf(\"rad\") > -1)\n      h = Math.round((h.substr(0, h.length - 3) / (2 * Math.PI)) * 360);\n    else if (h.indexOf(\"turn\") > -1)\n      h = Math.round(h.substr(0, h.length - 4) * 360);\n    if (h >= 360) h %= 360;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s,\n      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\n      m = l - c / 2,\n      r = 0,\n      g = 0,\n      b = 0;\n\n    if (0 <= h && h < 60) {\n      r = c;\n      g = x;\n      b = 0;\n    } else if (60 <= h && h < 120) {\n      r = x;\n      g = c;\n      b = 0;\n    } else if (120 <= h && h < 180) {\n      r = 0;\n      g = c;\n      b = x;\n    } else if (180 <= h && h < 240) {\n      r = 0;\n      g = x;\n      b = c;\n    } else if (240 <= h && h < 300) {\n      r = x;\n      g = 0;\n      b = c;\n    } else if (300 <= h && h < 360) {\n      r = c;\n      g = 0;\n      b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    let pctFound = a.indexOf(\"%\") > -1;\n\n    if (isPct) {\n      r = +((r / 255) * 100).toFixed(1);\n      g = +((g / 255) * 100).toFixed(1);\n      b = +((b / 255) * 100).toFixed(1);\n      if (!pctFound) {\n        a *= 100;\n      } else {\n        a = a.substr(0, a.length - 1);\n      }\n    } else if (pctFound) {\n      a = a.substr(0, a.length - 1) / 100;\n    }\n\n    return (\n      \"rgba(\" +\n      (isPct\n        ? r + \"%,\" + g + \"%,\" + b + \"%,\" + a + \"%\"\n        : +r + \",\" + +g + \",\" + +b + \",\" + +a) +\n      \")\"\n    );\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function hexToHSL(H) {\n  let ex = /^#([\\da-f]{3}){1,2}$/i;\n  if (ex.test(H)) {\n    // convert hex to RGB first\n    let r = 0,\n      g = 0,\n      b = 0;\n    if (H.length === 4) {\n      r = \"0x\" + H[1] + H[1];\n      g = \"0x\" + H[2] + H[2];\n      b = \"0x\" + H[3] + H[3];\n    } else if (H.length === 7) {\n      r = \"0x\" + H[1] + H[2];\n      g = \"0x\" + H[3] + H[4];\n      b = \"0x\" + H[5] + H[6];\n    }\n    // then to HSL\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n\n    if (delta === 0) h = 0;\n    else if (cmax === r) h = ((g - b) / delta) % 6;\n    else if (cmax === g) h = (b - r) / delta + 2;\n    else h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    if (h < 0) h += 360;\n\n    l = (cmax + cmin) / 2;\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return \"hsl(\" + h + \",\" + s + \"%,\" + l + \"%)\";\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function hexAToHSLA(H) {\n  let ex = /^#([\\da-f]{4}){1,2}$/i;\n  if (ex.test(H)) {\n    let r = 0,\n      g = 0,\n      b = 0,\n      a = 1;\n    // 4 digits\n    if (H.length === 5) {\n      r = \"0x\" + H[1] + H[1];\n      g = \"0x\" + H[2] + H[2];\n      b = \"0x\" + H[3] + H[3];\n      a = \"0x\" + H[4] + H[4];\n      // 8 digits\n    } else if (H.length === 9) {\n      r = \"0x\" + H[1] + H[2];\n      g = \"0x\" + H[3] + H[4];\n      b = \"0x\" + H[5] + H[6];\n      a = \"0x\" + H[7] + H[8];\n    }\n\n    // normal conversion to HSLA\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n\n    if (delta === 0) h = 0;\n    else if (cmax === r) h = ((g - b) / delta) % 6;\n    else if (cmax === g) h = (b - r) / delta + 2;\n    else h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    if (h < 0) h += 360;\n\n    l = (cmax + cmin) / 2;\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    a = (a / 255).toFixed(3);\n\n    return \"hsla(\" + h + \",\" + s + \"%,\" + l + \"%,\" + a + \")\";\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function HSLToHex(hsl) {\n  let ex = /^hsl\\(((((([12]?[1-9]?\\d)|[12]0\\d|(3[0-5]\\d))(\\.\\d+)?)|(\\.\\d+))(deg)?|(0|0?\\.\\d+)turn|(([0-6](\\.\\d+)?)|(\\.\\d+))rad)((,\\s?(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2}|(\\s(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2})\\)$/i;\n  if (ex.test(hsl)) {\n    let sep = hsl.indexOf(\",\") > -1 ? \",\" : \" \";\n    hsl = hsl\n      .substr(4)\n      .split(\")\")[0]\n      .split(sep);\n\n    let h = hsl[0],\n      s = hsl[1].substr(0, hsl[1].length - 1) / 100,\n      l = hsl[2].substr(0, hsl[2].length - 1) / 100;\n\n    // strip label and convert to degrees (if necessary)\n    if (h.indexOf(\"deg\") > -1) h = h.substr(0, h.length - 3);\n    else if (h.indexOf(\"rad\") > -1)\n      h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));\n    else if (h.indexOf(\"turn\") > -1)\n      h = Math.round(h.substr(0, h.length - 4) * 360);\n    if (h >= 360) h %= 360;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s,\n      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\n      m = l - c / 2,\n      r = 0,\n      g = 0,\n      b = 0;\n\n    if (0 <= h && h < 60) {\n      r = c;\n      g = x;\n      b = 0;\n    } else if (60 <= h && h < 120) {\n      r = x;\n      g = c;\n      b = 0;\n    } else if (120 <= h && h < 180) {\n      r = 0;\n      g = c;\n      b = x;\n    } else if (180 <= h && h < 240) {\n      r = 0;\n      g = x;\n      b = c;\n    } else if (240 <= h && h < 300) {\n      r = x;\n      g = 0;\n      b = c;\n    } else if (300 <= h && h < 360) {\n      r = c;\n      g = 0;\n      b = x;\n    }\n    // having obtained RGB, convert channels to hex\n    r = Math.round((r + m) * 255).toString(16);\n    g = Math.round((g + m) * 255).toString(16);\n    b = Math.round((b + m) * 255).toString(16);\n\n    // prepend 0s if necessary\n    if (r.length === 1) r = \"0\" + r;\n    if (g.length === 1) g = \"0\" + g;\n    if (b.length === 1) b = \"0\" + b;\n\n    return \"#\" + r + g + b;\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function HSLAToHexA(hsla) {\n  let ex = /^hsla\\(((((([12]?[1-9]?\\d)|[12]0\\d|(3[0-5]\\d))(\\.\\d+)?)|(\\.\\d+))(deg)?|(0|0?\\.\\d+)turn|(([0-6](\\.\\d+)?)|(\\.\\d+))rad)(((,\\s?(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2},\\s?)|((\\s(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2}\\s\\/\\s))((0?\\.\\d+)|[01]|(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%)\\)$/i;\n  if (ex.test(hsla)) {\n    let sep = hsla.indexOf(\",\") > -1 ? \",\" : \" \";\n    hsla = hsla\n      .substr(5)\n      .split(\")\")[0]\n      .split(sep);\n\n    // strip the slash\n    if (hsla.indexOf(\"/\") > -1) hsla.splice(3, 1);\n\n    let h = hsla[0],\n      s = hsla[1].substr(0, hsla[1].length - 1) / 100,\n      l = hsla[2].substr(0, hsla[2].length - 1) / 100,\n      a = hsla[3];\n\n    // strip label and convert to degrees (if necessary)\n    if (h.indexOf(\"deg\") > -1) h = h.substr(0, h.length - 3);\n    else if (h.indexOf(\"rad\") > -1)\n      h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));\n    else if (h.indexOf(\"turn\") > -1)\n      h = Math.round(h.substr(0, h.length - 4) * 360);\n    if (h >= 360) h %= 360;\n\n    // strip % from alpha, make fraction of 1 (if necessary)\n    if (a.indexOf(\"%\") > -1) a = a.substr(0, a.length - 1) / 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s,\n      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\n      m = l - c / 2,\n      r = 0,\n      g = 0,\n      b = 0;\n\n    if (0 <= h && h < 60) {\n      r = c;\n      g = x;\n      b = 0;\n    } else if (60 <= h && h < 120) {\n      r = x;\n      g = c;\n      b = 0;\n    } else if (120 <= h && h < 180) {\n      r = 0;\n      g = c;\n      b = x;\n    } else if (180 <= h && h < 240) {\n      r = 0;\n      g = x;\n      b = c;\n    } else if (240 <= h && h < 300) {\n      r = x;\n      g = 0;\n      b = c;\n    } else if (300 <= h && h < 360) {\n      r = c;\n      g = 0;\n      b = x;\n    }\n    r = Math.round((r + m) * 255).toString(16);\n    g = Math.round((g + m) * 255).toString(16);\n    b = Math.round((b + m) * 255).toString(16);\n    a = Math.round(a * 255).toString(16);\n\n    if (r.length === 1) r = \"0\" + r;\n    if (g.length === 1) g = \"0\" + g;\n    if (b.length === 1) b = \"0\" + b;\n    if (a.length === 1) a = \"0\" + a;\n\n    return \"#\" + r + g + b + a;\n  } else {\n    return \"Invalid input color\";\n  }\n}\n\nexport function nameToRGB(name) {\n  // create fake div\n  let fakeDiv = document.createElement(\"div\");\n  fakeDiv.style.color = name;\n  document.body.appendChild(fakeDiv);\n\n  // get color of div\n  let cs = window.getComputedStyle(fakeDiv),\n    pv = cs.getPropertyValue(\"color\");\n\n  // remove div after obtaining desired color value\n  document.body.removeChild(fakeDiv);\n\n  return pv;\n}\n\nexport function nameToHex(name) {\n  // get RGB from named color in div\n  let fakeDiv = document.createElement(\"div\");\n  fakeDiv.style.color = name;\n  document.body.appendChild(fakeDiv);\n\n  let cs = window.getComputedStyle(fakeDiv),\n    pv = cs.getPropertyValue(\"color\");\n\n  document.body.removeChild(fakeDiv);\n\n  // code ripped from RGBToHex() (except pv is substringed)\n  let rgb = pv\n      .substr(4)\n      .split(\")\")[0]\n      .split(\",\"),\n    r = (+rgb[0]).toString(16),\n    g = (+rgb[1]).toString(16),\n    b = (+rgb[2]).toString(16);\n\n  if (r.length === 1) r = \"0\" + r;\n  if (g.length === 1) g = \"0\" + g;\n  if (b.length === 1) b = \"0\" + b;\n\n  return \"#\" + r + g + b;\n}\n\nexport function nameToHSL(name) {\n  let fakeDiv = document.createElement(\"div\");\n  fakeDiv.style.color = name;\n  document.body.appendChild(fakeDiv);\n\n  let cs = window.getComputedStyle(fakeDiv),\n    pv = cs.getPropertyValue(\"color\");\n\n  document.body.removeChild(fakeDiv);\n\n  // code ripped from RGBToHSL() (except pv is substringed)\n  let rgb = pv\n      .substr(4)\n      .split(\")\")[0]\n      .split(\",\"),\n    r = rgb[0] / 255,\n    g = rgb[1] / 255,\n    b = rgb[2] / 255,\n    cmin = Math.min(r, g, b),\n    cmax = Math.max(r, g, b),\n    delta = cmax - cmin,\n    h = 0,\n    s = 0,\n    l = 0;\n\n  if (delta === 0) h = 0;\n  else if (cmax === r) h = ((g - b) / delta) % 6;\n  else if (cmax === g) h = (b - r) / delta + 2;\n  else h = (r - g) / delta + 4;\n\n  h = Math.round(h * 60);\n\n  if (h < 0) h += 360;\n\n  l = (cmax + cmin) / 2;\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n\n  return \"hsl(\" + h + \",\" + s + \"%,\" + l + \"%)\";\n}\n","import {\n  RGBToHex,\n  RGBAToHexA,\n  hexToRGB,\n  hexAToRGBA,\n  RGBToHSL,\n  RGBAToHSLA,\n  HSLToRGB,\n  HSLAToRGBA,\n  hexToHSL,\n  hexAToHSLA,\n  HSLToHex,\n  HSLAToHexA,\n  nameToRGB,\n  nameToHex,\n  nameToHSL\n} from \"./colors\";\n\nexport const copyToClipboard = str => {\n  const el = document.createElement(\"textarea\");\n  el.value = str;\n  el.setAttribute(\"readonly\", \"\");\n  el.style.position = \"absolute\";\n  el.style.left = \"-9999px\";\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n  console.log(`copied ${str} to clipboard`);\n};\nexport const getColorCodes = (colorFormat, input) => {\n  let colorHex, colorHexA, colorRgb, colorRgbA, colorHsl, colorHslA;\n  switch (colorFormat) {\n    case \"rgb\":\n      colorHex = RGBToHex(input);\n      colorHexA = colorHex + \"ff\";\n      colorRgb = input;\n      colorRgbA = hexAToRGBA(colorHexA);\n      colorHsl = RGBToHSL(input);\n      colorHslA = RGBAToHSLA(colorRgbA);\n      break;\n    case \"rgba\":\n      colorHexA = RGBAToHexA(input);\n      colorHex = colorHexA.substr(0, 7);\n      colorRgb = hexToRGB(colorHex);\n      colorRgbA = input;\n      colorHsl = hexToHSL(colorHex);\n      colorHslA = RGBAToHSLA(input);\n      break;\n    case \"hsl\":\n      colorHex = HSLToHex(input);\n      colorHexA = colorHex + \"ff\";\n      colorRgb = HSLToRGB(input);\n      colorRgbA = hexAToRGBA(colorHexA);\n      colorHsl = input;\n      colorHslA = hexAToHSLA(colorHexA);\n      break;\n    case \"hsla\":\n      colorHslA = input;\n      colorHexA = HSLAToHexA(input);\n      colorRgbA = HSLAToRGBA(input);\n      colorHex = HSLToHex(\n        (input.split(\",\").slice(0, 3) + \")\").replace(\"hsla\", \"hsl\")\n      );\n      colorRgb = hexToRGB(colorHex);\n      colorHsl = hexToHSL(colorHex);\n\n      break;\n    case \"hex\":\n      let normalizedInput = input;\n      if (input.length < 7) {\n        const parts = input.split(\"\");\n        normalizedInput =\n          \"#\" + parts[1] + parts[1] + parts[2] + parts[2] + parts[3] + parts[3];\n      }\n      colorHex = input;\n      colorRgb = hexToRGB(normalizedInput);\n      colorHsl = hexToHSL(normalizedInput);\n      colorHexA = normalizedInput + \"ff\"; //this will break if #FF or #FFF i guess\n      colorRgbA = hexAToRGBA(colorHexA);\n      colorHslA = hexAToHSLA(colorHexA);\n      break;\n    case \"hexa\":\n      colorHexA = input;\n      colorRgbA = hexAToRGBA(input);\n      colorHslA = hexAToHSLA(input);\n      colorHex = colorHexA.substring(0, 7);\n      colorRgb = hexToRGB(colorHex);\n      colorHsl = hexToHSL(colorHex);\n      break;\n    case \"name\":\n      colorHex = nameToHex(input);\n      colorRgb = nameToRGB(input);\n      colorHsl = nameToHSL(input);\n      colorHexA = colorHex + \"ff\";\n      colorRgbA = hexAToRGBA(colorHexA);\n      colorHslA = hexAToHSLA(colorHexA);\n      break;\n    default:\n      colorHex = colorHexA = colorRgb = colorRgbA = colorHsl = colorHslA = \"\";\n  }\n  //TODO: hsla somethimes has fractions in opacity, which makes other functions trip up\n  return [colorHex, colorHexA, colorRgb, colorRgbA, colorHsl, colorHslA];\n};\n","import React from \"react\";\nimport { copyToClipboard } from \"../modules/helpers\";\nimport { toast } from \"react-toastify\";\n\nexport default function ColorBox({ color, desc }) {\n  toast.configure({\n    autoClose: 1500\n  });\n  const notify = () => toast(\"Copied the color to your clipboard\");\n  return (\n    <div\n      onClick={e => {\n        copyToClipboard(color);\n        notify();\n      }}\n      className=\"colorbox\"\n      style={{ background: color }}\n    >\n      <header>\n        <h1>As {desc}</h1>\n      </header>\n      <p>{color}</p>\n    </div>\n  );\n}\n","export const knownColors = [\n  \"aliceblue\",\n  \"antiquewhite\",\n  \"aqua\",\n  \"aquamarine\",\n  \"azure\",\n  \"beige\",\n  \"bisque\",\n  \"black\",\n  \"blanchedalmond\",\n  \"blue\",\n  \"blueviolet\",\n  \"brown\",\n  \"burlywood\",\n  \"cadetblue\",\n  \"chartreuse\",\n  \"chocolate\",\n  \"coral\",\n  \"cornflowerblue\",\n  \"cornsilk\",\n  \"crimson\",\n  \"cyan\",\n  \"darkblue\",\n  \"darkcyan\",\n  \"darkgoldenrod\",\n  \"darkgray\",\n  \"darkgrey\",\n  \"darkgreen\",\n  \"darkkhaki\",\n  \"darkmagenta\",\n  \"darkolivegreen\",\n  \"darkorange\",\n  \"darkorchid\",\n  \"darkred\",\n  \"darksalmon\",\n  \"darkseagreen\",\n  \"darkslateblue\",\n  \"darkslategray\",\n  \"darkslategrey\",\n  \"darkturquoise\",\n  \"darkviolet\",\n  \"deeppink\",\n  \"deepskyblue\",\n  \"dimgray\",\n  \"dimgrey\",\n  \"dodgerblue\",\n  \"firebrick\",\n  \"floralwhite\",\n  \"forestgreen\",\n  \"fuchsia\",\n  \"gainsboro\",\n  \"ghostwhite\",\n  \"gold\",\n  \"goldenrod\",\n  \"gray\",\n  \"grey\",\n  \"green\",\n  \"greenyellow\",\n  \"honeydew\",\n  \"hotpink\",\n  \"indianred \",\n  \"indigo  \",\n  \"ivory\",\n  \"khaki\",\n  \"lavender\",\n  \"lavenderblush\",\n  \"lawngreen\",\n  \"lemonchiffon\",\n  \"lightblue\",\n  \"lightcoral\",\n  \"lightcyan\",\n  \"lightgoldenrodyellow\",\n  \"lightgray\",\n  \"lightgrey\",\n  \"lightgreen\",\n  \"lightpink\",\n  \"lightsalmon\",\n  \"lightseagreen\",\n  \"lightskyblue\",\n  \"lightslategray\",\n  \"lightslategrey\",\n  \"lightsteelblue\",\n  \"lightyellow\",\n  \"lime\",\n  \"limegreen\",\n  \"linen\",\n  \"magenta\",\n  \"maroon\",\n  \"mediumaquamarine\",\n  \"mediumblue\",\n  \"mediumorchid\",\n  \"mediumpurple\",\n  \"mediumseagreen\",\n  \"mediumslateblue\",\n  \"mediumspringgreen\",\n  \"mediumturquoise\",\n  \"mediumvioletred\",\n  \"midnightblue\",\n  \"mintcream\",\n  \"mistyrose\",\n  \"moccasin\",\n  \"navajowhite\",\n  \"navy\",\n  \"oldlace\",\n  \"olive\",\n  \"olivedrab\",\n  \"orange\",\n  \"orangered\",\n  \"orchid\",\n  \"palegoldenrod\",\n  \"palegreen\",\n  \"paleturquoise\",\n  \"palevioletred\",\n  \"papayawhip\",\n  \"peachpuff\",\n  \"peru\",\n  \"pink\",\n  \"plum\",\n  \"powderblue\",\n  \"purple\",\n  \"rebeccapurple\",\n  \"red\",\n  \"rosybrown\",\n  \"royalblue\",\n  \"saddlebrown\",\n  \"salmon\",\n  \"sandybrown\",\n  \"seagreen\",\n  \"seashell\",\n  \"sienna\",\n  \"silver\",\n  \"skyblue\",\n  \"slateblue\",\n  \"slategray\",\n  \"slategrey\",\n  \"snow\",\n  \"springgreen\",\n  \"steelblue\",\n  \"tan\",\n  \"teal\",\n  \"thistle\",\n  \"tomato\",\n  \"turquoise\",\n  \"violet\",\n  \"wheat\",\n  \"white\",\n  \"whitesmoke\",\n  \"yellow\",\n  \"yellowgreen\"\n];\n","import React, { useState, useEffect } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport ColorBox from \"./components/ColorBox\";\n\nimport { knownColors } from \"./modules/knownColors\";\nimport { getColorFormat } from \"./modules/getColorFormat\";\nimport { getColorCodes } from \"./modules/helpers\";\nimport \"./App.css\";\n//TODO: convert color to name if match (same procedure as anme to HSL, look up each name value (turns rgb) and do a map)\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeSuggestion, setActiveSuggestion] = useState(-1);\n  useEffect(() => {\n    //TODO: brug ref til input (så vi ikke lytter på input, og kun når den er i fokus)\n    window.addEventListener(\"keyup\", handleDropDown);\n    function handleDropDown(e) {\n      if (suggestions.length > 0) {\n        if (e.key === \"ArrowDown\") {\n          setActiveSuggestion(activeSuggestion + 1);\n        } else if (e.key === \"ArrowUp\") {\n          setActiveSuggestion(activeSuggestion - 1);\n        } else if (\n          e.key === \"Enter\" &&\n          activeSuggestion > -1 &&\n          activeSuggestion < suggestions.length\n        ) {\n          updateInputState(suggestions[activeSuggestion]);\n          setActiveSuggestion(-1);\n        }\n      }\n      return function cleanup() {\n        window.removeEventListener(\"keyup\", handleDropDown);\n      };\n    }\n  }, [activeSuggestion, suggestions]);\n  //let colorHex, colorHexA, colorRgb, colorRgbA, colorHsl, colorHslA;\n  const colorFormat = getColorFormat(input);\n  const [\n    colorHex,\n    colorHexA,\n    colorRgb,\n    colorRgbA,\n    colorHsl,\n    colorHslA\n  ] = getColorCodes(colorFormat, input);\n\n  function updateInputState(val) {\n    setInput(val);\n    setSuggestions(\n      knownColors.filter(\n        color => val !== \"\" && color.startsWith(val) && color !== val\n      )\n    );\n    setActiveSuggestion(-1);\n  }\n  //TODO: calculate a decent contrast for the colorboxes\n  /* //refractor into colorbox wrapper? so contrast is calculated once\nfunction luminanace(r, g, b) {\n    var a = [r, g, b].map(function (v) {\n        v /= 255;\n        return v <= 0.03928\n            ? v / 12.92\n            : Math.pow( (v + 0.055) / 1.055, 2.4 );\n    });\n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\nfunction contrast(rgb1, rgb2) {\n    return (luminanace(rgb1[0], rgb1[1], rgb1[2]) + 0.05)\n         / (luminanace(rgb2[0], rgb2[1], rgb2[2]) + 0.05);\n}\ncontrast([255, 255, 255], [255, 255, 0]); // 1.074 for yellow, 4.5 is the goal, 3 for bigger text\ncontrast([255, 255, 255], [0, 0, 255]); // 8.592 for blue\n  */\n  return (\n    <>\n      <ToastContainer />\n      <div id=\"wrapper\">\n        <div id=\"formWrapper\">\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n            }}\n          >\n            <input\n              type=\"text\"\n              name=\"color\"\n              value={input}\n              onChange={e => updateInputState(e.target.value)}\n              onFocus={e => e.target.select()}\n              placeholder=\"Type a color, any format\"\n            />\n            <ul>\n              {suggestions.map((sug, i) => {\n                return (\n                  <li\n                    key={i}\n                    className={activeSuggestion === i ? \"active\" : \"\"}\n                    onClick={() => updateInputState(sug)}\n                  >\n                    {sug}\n                  </li>\n                );\n              })}\n            </ul>\n          </form>\n        </div>\n        <ColorBox color={colorHex} desc=\"Hex\" />\n        <ColorBox color={colorHexA} desc=\"HexA\" />\n        <ColorBox color={colorRgb} desc=\"RGB\" />\n        <ColorBox color={colorRgbA} desc=\"RGBA\" />\n        <ColorBox color={colorHsl} desc=\"HSL\" />\n        <ColorBox color={colorHslA} desc=\"HSLA\" />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { knownColors } from \"./knownColors\";\n\nexport function getColorFormat(str) {\n  if (str.match(/rgba/)) {\n    return \"rgba\";\n  } else if (str.match(/rgb/)) {\n    return \"rgb\";\n  } else if (str.match(/#/)) {\n    if (str.length === 4 || str.length === 7) {\n      //#FF or #FFF\n      return \"hex\";\n    } else if (str.length === 9) {\n      //#FFFFFF80\n      return \"hexa\";\n    }\n  } else if (str.match(/hsla/)) {\n    return \"hsla\";\n  } else if (str.match(/hsl/)) {\n    return \"hsl\";\n  } else if (knownColors.includes(str)) {\n    return \"name\";\n  }\n\n  return false;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}